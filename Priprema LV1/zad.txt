#include <stdio.h>
#include <stdlib.h>
#include <time.h>
void gen_arr(float V[], int n, float dg, float gg);
int sekv_pret(float V[], int n, float x );
void insertion_sort(float V[], int n);
int bin_pret(float V[], int n, float x);
int main(){
    int n = 10; // veličina niza
    float V[n]; // niz pseudoslučajnih brojeva
    float dg = 0, gg = 50; // donja i gornja granica
    float x = 50; // traženi broj

    // Inicijalizacija generatora pseudoslučajnih brojeva
    srand(time(NULL));

    // Generiranje pseudoslučajnih brojeva u nizu V
    gen_arr(V, n, dg, gg);

    // Ispis niza prije sortiranja
    printf("Niz prije sortiranja: ");
    for (int i = 0; i < n; i++) {
        printf("%.2f ", V[i]);
    }
    printf("\n");
   
   //sekv pret
    printf("%d\n", sekv_pret(V, n, x));

    // Sortiranje niza uzlazno
    insertion_sort(V, n);

    // Ispis sortiranog niza
    printf("Niz nakon sortiranja: ");
    for (int i = 0; i < n; i++) {
        printf("%.2f ", V[i]);
        
    }
    //bin pret
    printf("\n%d", bin_pret(V, n, x));

return 0;
}

void gen_arr(float V[], int n, float dg, float gg) {
    srand(time(NULL)); 

    for (int i = 0; i < n; i++) {
        V[i] = dg + ((float)rand() / RAND_MAX) * (gg - dg);
    }
}

int sekv_pret(float V[], int n, float x ){
    for(int i = 0; i < n; i++){
        if(V[i] == x){
            return i;
        }
    }
    return -1;
}

void insertion_sort(float V[], int n){
    int temp, i, j;
    for(i = 1; i < n; i++){
        temp = V[i];
        j = i - 1;
        while (j >= 0 && V[j] > temp){
            V[j + 1] = V[j];
            j = j - 1;
        }
        V[j + 1] = temp;
    }
}

int bin_pret(float V[], int n, float x){
    int donjaG = 0;
    int gornjaG = n-1;
    int sredina = 0;
    
    while(donjaG <= gornjaG){
        sredina = (donjaG + gornjaG)/2;
        
        if(V[sredina] > x){
            gornjaG = sredina -1;
        }
        if(V[sredina] < x){
            donjaG = sredina + 1;
        }
        else{
            return sredina;
        }
    }
    if(donjaG > gornjaG){
        return -1;
    }
}
